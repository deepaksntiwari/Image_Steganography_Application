/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Codes;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author Deepak
 */
public class Encode_Frame extends javax.swing.JFrame {

    BufferedImage sourceImage =null, EmbeddedImage =null;
    /**
     * Creates new form Encode_Frame
     */
    public Encode_Frame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextMessage = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jLabelSourceImage = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabelEmbed = new javax.swing.JLabel();
        jButtonOpen = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jButtonReset = new javax.swing.JButton();
        jButtonEmbed = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Message"));

        jTextMessage.setColumns(20);
        jTextMessage.setRows(5);
        jScrollPane2.setViewportView(jTextMessage);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Source Image"));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelSourceImage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelSourceImage, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Embedded Image")));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelEmbed, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelEmbed, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jButtonOpen.setText("Open");
        jButtonOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOpenActionPerformed(evt);
            }
        });

        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jButtonReset.setText("Reset");
        jButtonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetActionPerformed(evt);
            }
        });

        jButtonEmbed.setText("Embed");
        jButtonEmbed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEmbedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonOpen, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61)
                        .addComponent(jButtonEmbed, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 153, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(jButtonReset, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonOpen, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonEmbed, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonReset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
private File showFileDialog(final boolean open){
        JFileChooser fc=new JFileChooser("open an image");
        FileFilter filefilter= new FileFilter(){
            @Override
            public boolean accept(File file){
                String name =file.getName().toLowerCase();
                if(open)
                    return file.isDirectory()||name.endsWith(".jpg")||name.endsWith(".jpeg")||name.endsWith(".png")||name.endsWith(".bmg");
                return file.isDirectory()||name.endsWith(".png")||name.endsWith(".bmg");
            }
            
            @Override
               public String getDescription(){
                   if(open)
                    return "Image (*.jpg, *.jpeg, *.png, *.bmp)";
                return "Image (*.png, *.bmp)";
        }
    };
        fc.setAcceptAllFileFilterUsed(false);
        fc.addChoosableFileFilter(filefilter);
        
        
        File file=null;
        if(open && fc.showOpenDialog(this)==fc.APPROVE_OPTION)
            file=fc.getSelectedFile();
        else if(!open && fc.showSaveDialog(this)==fc.APPROVE_OPTION)
            file=fc.getSelectedFile();
        
        return file;
    }
    
    private void jButtonOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOpenActionPerformed
        // TODO add your handling code here:
        File file=showFileDialog(true);
        
        
        try {
            sourceImage =ImageIO.read(file);
            ImageIcon img1=new ImageIcon(sourceImage);
            Image img=img1.getImage();
            Image image=img.getScaledInstance(jLabelSourceImage.getWidth(), jLabelSourceImage.getHeight(),Image.SCALE_DEFAULT);
            ImageIcon i=new ImageIcon(image);
            
            jLabelSourceImage.setIcon(i);
            this.validate();
        } catch (IOException ex) {
        }
    }//GEN-LAST:event_jButtonOpenActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        if(EmbeddedImage ==null){
            JOptionPane.showMessageDialog(this, "No Message has been Embedded", "Nothing to Save", JOptionPane.ERROR_MESSAGE);
        }
        else{
            File file=showFileDialog(false);
            if(file==null)
                return;
            
                    String name=file.getName();
                    String Extension =name.substring(name.lastIndexOf(".")+1).toLowerCase();
                    
                    if(!Extension.equals("png")&& !Extension.equals("bmp")){
                        Extension="png";
                        file=new File(file.getAbsolutePath()+".png");
                    }
                    
                    if(file.exists())
                        file.delete();
            try {
                ImageIO.write(EmbeddedImage,Extension.toUpperCase(), file);
            } catch (IOException ex) {
}

        }
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetActionPerformed
        // TODO add your handling code here:
        jTextMessage.setText("");
        sourceImage=null;
        EmbeddedImage = null;
        jLabelSourceImage.setIcon(null);
        jLabelEmbed.setIcon(null);
    }//GEN-LAST:event_jButtonResetActionPerformed

    private void jButtonEmbedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEmbedActionPerformed
        // TODO add your handling code here:
        
        if(jTextMessage.equals("")||sourceImage==null){
            JOptionPane.showMessageDialog(this, "No Messsge has been embedded", "No Pictures or Message Found", JOptionPane.ERROR_MESSAGE );
        return ;
        }
        String Message =jTextMessage.getText();
        EmbeddedImage =sourceImage.getSubimage(0, 0, sourceImage.getWidth(), sourceImage.getHeight());
        embeddedMessage(EmbeddedImage, Message);  
        
         ImageIcon Img1=new ImageIcon(EmbeddedImage);
            Image Img=Img1.getImage();
            Image Image1=Img.getScaledInstance(jLabelSourceImage.getWidth(), jLabelSourceImage.getHeight(),Image.SCALE_SMOOTH);
            ImageIcon I=new ImageIcon(Image1);
            
        jLabelEmbed.setIcon(I);
        this.validate();
        
        
    }//GEN-LAST:event_jButtonEmbedActionPerformed

    private void embeddedMessage (BufferedImage img, String mess ){

        int messageLength=mess.length();
        int imageWidth=img.getWidth(),imageHeight=img.getHeight(),imageSize=imageHeight*imageWidth;
        if(messageLength*8+32>imageSize){
        JOptionPane.showMessageDialog(this, "Message is too long for this Image", "Message is too long!", JOptionPane.ERROR_MESSAGE);
        
        return;
        }
        else{
            embedInteger(img, messageLength, 0, 0);
            byte b[]=mess.getBytes();
            for(int i=0;i<b.length;i++)
                embedByte(img, b[i], i*8+32, 0);
            
        }
        
    }
    
            private void embedInteger(BufferedImage img,int n, int start, int storageBit){
                int maxX=img.getWidth(), maxY=img.getHeight(),
                        startX=start/maxY, startY=start-startX*maxY, count=0;
                
                for(int i=startX;i<maxX&&count<32;i++){
                    for(int j=startY;j<maxY&&count<32;j++){
                        int rgb =img.getRGB(i, j), bit=getBitValue(n, count);
                        rgb=setBitValue(rgb, storageBit, bit);
                        img.setRGB(i, j, rgb);
                        count++;
                    }}
                
                
            }
            
            private void embedByte(BufferedImage img, byte b, int start, int storageBit){
                int maxX=img.getWidth(),
                        maxY=img.getHeight(), startX=start/maxY, startY=start-startX*maxY, count=0;
                for(int i=startX; i<maxX&&count<8;i++){
                    for(int j=startY;j<maxY&&count<8;j++){
                        int rgb=img.getRGB(i,j), bit = getBitValue(b, count);
                        rgb=setBitValue(rgb, storageBit, bit);
                        img.setRGB(i, j, rgb);
                        count++;
                    }
                    
                }
                
            }
            
            private int getBitValue(int n, int location){
                int v=(int)(n & Math.round(Math.pow(2, location)));
                return v==0?0:1;
                
            }

            private int setBitValue(int n, int location, int bit){
                int toggle =(int)Math.pow(n, location), bv=getBitValue(n, location);
                if(bv==bit)
                    return n;
                if(bv==0 && bit==1)
                    n|=toggle;
                else if(bv==1&&bit==0)
                    n^=toggle;
                
                return n;
                    }
             
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Encode_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Encode_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Encode_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Encode_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Encode_Frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonEmbed;
    private javax.swing.JButton jButtonOpen;
    private javax.swing.JButton jButtonReset;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JLabel jLabelEmbed;
    private javax.swing.JLabel jLabelSourceImage;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextMessage;
    // End of variables declaration//GEN-END:variables


}
